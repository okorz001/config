# ~/.gitconfig
# vim:ft=cfg:

[user]
    # User name for commits.
    name = Oscar Korz

    # Email for commits.
    email = okorz001@gmail.com

[github]
    # Github account name.
    user = okorz001

[core]
    # Editor for commit messages.
    editor = vim

    # Pager for multi-screen output.
    pager = less

    # A file of exclude patterns to apply to all repos.
    excludesfile = ~/.gitignore

[push]
    # Push the current branch to the branch it is tracking.
    # Aborts with an error if there is no upstream.
    default = upstream

[merge]
    # Create local, remote and original.
    conflictstyle = diff3

    # Use vimdiff to merge in a terminal.
    tool = vimdiff

[grep]
    # Show line numbers. (grep -n)
    lineNumber = true

    # Use extended regexes, i.e. less escaping. (grep -E)
    extendedRegex = true

[color]
    # Colorize all output if the terminal supports it.
    ui = auto

    # Colorize when using a pager.
    pager = true

[color "branch"]
    current = cyan bold
    local = green
    remote = red

[color "decorate"]
    head = cyan bold
    branch = green
    remoteBranch = red
    tag = cyan
    stash = yellow bold

[color "status"]
    branch = cyan bold
    nobranch = white red bold
    header =
    added = green
    changed = yellow
    untracked = red

[color "diff"]
    commit = yellow
    meta = white bold
    frag = cyan
    func = cyan
    old = red
    new = green
    whitespace = white red bold
    plain =

[color "grep"]
    filename = cyan bold
    linenumber = magenta bold
    separator = white bold
    match = red bold
    selected =
    context =
    function = cyan

[alias]
    # Two-letter abbreviations because I'm lazy.
    br = branch
    ci = commit
    co = checkout
    st = status
    sub = submodule

    # pi is short for pick. cp is a bad idea... :)
    pi = cherry-pick

    # Sync our view of all remotes. We should have a perfect mirror now.
    # --prune drops all remote branches that are now stale (have been deleted).
    # --tags fetchs tags that are otherwise unreachable by branches.
    sync = fetch --prune --tags --all

    # Get the current SHA1 hash.
    where = log --pretty=format:%H -1

    # Quick and dirty history graph. Good for cherry-picking/rebasing.
    l1 = log --pretty=oneline --abbrev-commit --decorate --graph
    lf = log --pretty=fuller --decorate --graph --stat

    # Git has mv, so why not cp?
    # If $# > 2, this could stage other local changes...
    cp = "!sh -c 'cp $@ && git add ${@:$#}' -"

    # Amend commit without changing commit message.
    amend = commit --amend -C HEAD

	# Recursive clone. God damn you submodules!!
	cloner = clone --recursive
